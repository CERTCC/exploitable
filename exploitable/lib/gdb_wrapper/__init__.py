### BEGIN LICENSE ###
### Use of the triage tools and related source code is subject to the terms
### of the license below.
###
### ------------------------------------------------------------------------
### Copyright (C) 2011 Carnegie Mellon University. All Rights Reserved.
### Portions Copyright 2013 BlackBerry Ltd. All Rights Reserved.
### ------------------------------------------------------------------------
### Redistribution and use in source and binary forms, with or without
### modification, are permitted provided that the following conditions are
### met:
###
### 1. Redistributions of source code must retain the above copyright
###    notice, this list of conditions and the following acknowledgments
###    and disclaimers.
###
### 2. Redistributions in binary form must reproduce the above copyright
###    notice, this list of conditions and the following disclaimer in the
###    documentation and/or other materials provided with the distribution.
###
### 3. All advertising materials for third-party software mentioning
###    features or use of this software must display the following
###    disclaimer:
###
###    "Neither Carnegie Mellon University nor its Software Engineering
###     Institute have reviewed or endorsed this software"
###
### 4. The names "Department of Homeland Security," "Carnegie Mellon
###    University," "CERT" and/or "Software Engineering Institute" shall
###    not be used to endorse or promote products derived from this software
###    without prior written permission. For written permission, please
###    contact permission@sei.cmu.edu.
###
### 5. Products derived from this software may not be called "CERT" nor
###    may "CERT" appear in their names without prior written permission of
###    permission@sei.cmu.edu.
###
### 6. Redistributions of any form whatsoever must retain the following
###    acknowledgment:
###
###    "This product includes software developed by CERT with funding
###     and support from the Department of Homeland Security under
###     Contract No. FA 8721-05-C-0003."
###
### THIS SOFTWARE IS PROVIDED BY CARNEGIE MELLON UNIVERSITY ``AS IS'' AND
### CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER
### EXPRESS OR IMPLIED, AS TO ANY MATTER, AND ALL SUCH WARRANTIES, INCLUDING
### WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE
### EXPRESSLY DISCLAIMED. WITHOUT LIMITING THE GENERALITY OF THE FOREGOING,
### CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND
### RELATING TO EXCLUSIVITY, INFORMATIONAL CONTENT, ERROR-FREE OPERATION,
### RESULTS TO BE OBTAINED FROM USE, FREEDOM FROM PATENT, TRADEMARK AND
### COPYRIGHT INFRINGEMENT AND/OR FREEDOM FROM THEFT OF TRADE SECRETS.
### END LICENSE ###
'''
A collection of Python objects that wrap and extend the GDB Python API.

The objects in this file should generally not be instantiated directly--
they should be accessed via getTarget()

Note that for many objects defined in this file, GDB is queried only when the
object is instantiated: if the state of the Inferior changes, any previously
created instances should be considered stale.
'''
try:
    import gdb
except ImportError as e:
    raise ImportError("This script must be run in GDB: ", str(e))

"""
class ArmTarget(Target, ArmTargetMixin):
    '''
    A wrapper for an ARM Linux GDB Inferior.
    '''
    pass

class QnxTarget(Target, ArmTargetMixin, QnxTargetMixin):
    '''
    A wrapper for a ARM Linux (with QNX Neutrino kernel) GDB Inferior.
    '''
    pass
"""

from arm import ArmTarget
from qnx import QnxTarget
from asan import ASanTarget
from x86 import Target

class ArmASanTarget(ASanTarget, ArmTarget):
    '''
    A wrapper for an ARM Linux GDB Inferior enhanced with ASAN log output.
    '''
    pass

class QnxASanTarget(ASanTarget, QnxTarget):
    '''
    A wrapper for an ARM Linux (with QNX Neutrino kernel) GDB Inferior 
    enhanced with ASAN log output.
    '''
    pass

def getTarget(asan_log_file=None): 
    ''' 
    Returns the current Target, which is a Python wrapper representing the 
    current state of the underlying Linux GDB Inferior object. TODO: update this comment to explain Mixins
    ''' 
    from .. import analyzers

    # Get OS info
    osabi = Target._re_gdb_osabi.search(str(gdb.execute("show osabi", False, True))).group(1) # TODO: verify this works on older versions of GDB (7.2)
    arch = Target._re_gdb_arch.search(str(gdb.execute("show architecture", False, True))).group(1)

    # Instantiate a target based on the params and OS info
    # ASAN + i386 + *
    if asan_log_file and arch.startswith("i386"):
        target = ASanTarget(asan_log_file.read())
        target.analyzer = analyzers.ASanAnalyzer(target)
        return target
    # ASAN + ARM + QNX
    elif asan_log_file and arch == "ARM" and osabi == "QNX Neutrino":
        target = QnxASanTarget(asan_log_file.read())
        target.analyzer = analyzers.ASanAnalyzer(target)
        return target
    # ASAN + ARM + *
    elif asan_log_file and arch == "ARM":
        target = ArmASanTarget(asan_log_file.read())
        target.analyzer = analyzers.ArmASanAnalyzer(target)
        return target
    # * + ARM + QNX
    elif arch == "ARM" and osabi == "QNX Neutrino":
        target = QnxTarget()
        target.analyzer = analyzers.ArmAnalyzer(target)
        return target
    # * + i386 + *
    elif arch.startswith("i386"):
        target = Target()
        target.analyzer = analyzers.Analyzer(target)
        return target
    # * + ARM + *
    elif arch == "ARM":
        target = ArmTarget()
        target.analyzer = analyzers.ArmAnalyzer(target)
        return target
    else:
        raise NotImplementedError("no support for arch=%s and osabi=%s" % (arch, osabi))
    
        
    '''
    TODO: finish putting TargetMixin logic here. [DONE]
    Also add getAnalzyer (mixin) logic, and assign it to target.analyzer. [DONE]
     Then go back to Classification and pass the analyzer to the rule-sorting function [DONE]
    Once that is done, go ahead and finish creating AnalyzerMixins for AsanMixin and ArmMixin, and add Mixin definitions. Then all of Jesse's logic will finally be integrated.  [DONE]
    We can advertise this
    function in the readme as the one place where platform selection is done (this is why we should avoid getAnalyzer -- let's just do platform selection once, in one place. Easier to keep track of)o 
    After taking care of all of the other TODOs (changing rule matcher function calls to strings comes to mind), we can finally make sure the old unit tests pass, and possibly write new ones for the
    new Mixins/types
    Also, this file is huge -- need to break up file organization by platform, maybe
    '''
    return Target()
