### BEGIN LICENSE ###
### Use of the triage tools and related source code is subject to the terms
### of the license below.
###
### ------------------------------------------------------------------------
### Copyright (C) 2011 Carnegie Mellon University. All Rights Reserved.
### Portions Copyright 2013 BlackBerry Ltd. All Rights Reserved.
### ------------------------------------------------------------------------
### Redistribution and use in source and binary forms, with or without
### modification, are permitted provided that the following conditions are
### met:
###
### 1. Redistributions of source code must retain the above copyright
###    notice, this list of conditions and the following acknowledgments
###    and disclaimers.
###
### 2. Redistributions in binary form must reproduce the above copyright
###    notice, this list of conditions and the following disclaimer in the
###    documentation and/or other materials provided with the distribution.
###
### 3. All advertising materials for third-party software mentioning
###    features or use of this software must display the following
###    disclaimer:
###
###    "Neither Carnegie Mellon University nor its Software Engineering
###     Institute have reviewed or endorsed this software"
###
### 4. The names "Department of Homeland Security," "Carnegie Mellon
###    University," "CERT" and/or "Software Engineering Institute" shall
###    not be used to endorse or promote products derived from this software
###    without prior written permission. For written permission, please
###    contact permission@sei.cmu.edu.
###
### 5. Products derived from this software may not be called "CERT" nor
###    may "CERT" appear in their names without prior written permission of
###    permission@sei.cmu.edu.
###
### 6. Redistributions of any form whatsoever must retain the following
###    acknowledgment:
###
###    "This product includes software developed by CERT with funding
###     and support from the Department of Homeland Security under
###     Contract No. FA 8721-05-C-0003."
###
### THIS SOFTWARE IS PROVIDED BY CARNEGIE MELLON UNIVERSITY ``AS IS'' AND
### CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER
### EXPRESS OR IMPLIED, AS TO ANY MATTER, AND ALL SUCH WARRANTIES, INCLUDING
### WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE
### EXPRESSLY DISCLAIMED. WITHOUT LIMITING THE GENERALITY OF THE FOREGOING,
### CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND
### RELATING TO EXCLUSIVITY, INFORMATIONAL CONTENT, ERROR-FREE OPERATION,
### RESULTS TO BE OBTAINED FROM USE, FREEDOM FROM PATENT, TRADEMARK AND
### COPYRIGHT INFRINGEMENT AND/OR FREEDOM FROM THEFT OF TRADE SECRETS.
### END LICENSE ###
'''
A collection of Python objects that wrap and extend the GDB Python API.

The objects in this file should generally not be instantiated directly--
they should be accessed via getTarget()

Note that for many objects defined in this file, GDB is queried only when the
object is instantiated: if the state of the Inferior changes, any previously
created instances should be considered stale.
'''
try:
    import gdb
except ImportError as e:
    raise ImportError("This script must be run in GDB: ", str(e))

from gdb_wrapper.arm import ArmTarget
from gdb_wrapper.qnx import QnxTarget
from gdb_wrapper.asan import ASanTarget
from gdb_wrapper.x86 import Target, x86Target

from analyzers.x86 import Analyzer
from analyzers.asan import ASanAnalyzer
from analyzers.arm import ArmAnalyzer

class ArmASanTarget(ASanTarget, ArmTarget):
    '''
    A wrapper for an ARM Linux GDB Inferior enhanced with ASAN log output.
    '''
    pass

class QnxASanTarget(ASanTarget, QnxTarget):
    '''
    A wrapper for an ARM Linux (with QNX Neutrino kernel) GDB Inferior 
    enhanced with ASAN log output.
    '''
    pass

class ArmASanAnalyzer(ArmAnalyzer, ASanAnalyzer):
    '''
    TODO
    ''' 
    pass

def getTarget(asan_log_file=None): 
    ''' 
    Returns the current Target, which is a Python wrapper representing the 
    current state of the underlying Linux GDB Inferior object. TODO: update this comment to explain Mixins
    ''' 

    # Get OS info
    osabi = Target._re_gdb_osabi.search(str(gdb.execute("show osabi", False, True))).group(1) # TODO: verify this works on older versions of GDB (7.2)
    arch = Target._re_gdb_arch.search(str(gdb.execute("show architecture", False, True))).group(1)

    # Instantiate a target based on the params and OS info
    # ASAN + i386 + *
    if asan_log_file and arch.startswith("i386"):
        target = ASanTarget(asan_log_file.read())
        target.analyzer = ASanAnalyzer(target)
        return target
    # ASAN + ARM + QNX
    elif asan_log_file and arch.lower()[:3] == "arm" and osabi == "QNX Neutrino":
        target = QnxASanTarget(asan_log_file.read())
        target.analyzer = ASanAnalyzer(target)
        return target
    # ASAN + ARM + *
    elif asan_log_file and arch.lower()[:3] == "arm":
        target = ArmASanTarget(asan_log_file.read())
        target.analyzer = ArmASanAnalyzer(target)
        return target
    # * + ARM + QNX
    elif arch.lower()[:3] == "arm" and osabi == "QNX Neutrino":
        target = QnxTarget()
        target.analyzer = ArmAnalyzer(target) # TODO: is this wrong?
        return target
    # * + i386 + *
    elif arch.startswith("i386"):
        target = x86Target()
        target.analyzer = Analyzer(target)
        return target
    # * + ARM + *
    elif arch.lower()[:3] == "arm":
        target = ArmTarget()
        target.analyzer = ArmAnalyzer(target)
        return target
    else:
        raise NotImplementedError("no support for arch=%s and osabi=%s" % (arch, osabi))
    
        
    '''
    TODO:
    address TODOs
    run c++/arm integration tests, make fixes accordingly
    update commnets, etc.
    possibly write per-plat unit tests
    add travisci support
    '''
    return Target()
