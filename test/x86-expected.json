[["exploitable/tests/bin/testReturnAv.test", {"category": "EXPLOITABLE", "ranking": [3, 22], "explanation": "The target tried to access data at an address that matches the program counter. This is likely due to the execution of a branch instruction (ex: 'call') with a bad argument, but it could also be due to execution continuing past the end of a memory region or another cause. Regardless this likely indicates that the program counter contents are tainted and can be controlled by an attacker.", "short_desc": "SegFaultOnPc", "desc": "Segmentation fault on program counter"}], ["exploitable/tests/bin/testSourceAv.test", {"category": "UNKNOWN", "ranking": [19, 22], "explanation": "The target crashed on an access violation at an address matching the source operand of the current instruction. This likely indicates a read access violation.", "short_desc": "SourceAv", "desc": "Access violation on source operand"}], ["exploitable/tests/bin/testBenignSignal.test", {"category": "PROBABLY_NOT_EXPLOITABLE", "ranking": [18, 22], "explanation": "The target is stopped on a signal that either does not indicate an error or indicates an error that is generally not considered exploitable.", "short_desc": "BenignSignal", "desc": "Benign signal"}], ["exploitable/tests/bin/testSourceAvNearNull.test", {"category": "PROBABLY_NOT_EXPLOITABLE", "ranking": [16, 22], "explanation": "The target crashed on an access violation at an address matching the source operand of the current instruction. This likely indicates a read access violation, which may mean the application crashed on a simple NULL dereference to data structure that has no immediate effect on control of the processor.", "short_desc": "SourceAvNearNull", "desc": "Access violation near NULL on source operand"}], ["exploitable/tests/bin/testDestAvNearNull.test", {"category": "PROBABLY_EXPLOITABLE", "ranking": [15, 22], "explanation": "The target crashed on an access violation at an address matching the destination operand of the instruction. This likely indicates a write access violation, which means the attacker may control write address and/or value. However, it there is a chance it could be a NULL dereference.", "short_desc": "DestAvNearNull", "desc": "Access violation near NULL on destination operand"}], ["exploitable/tests/bin/testBadInstruction.test", {"category": "EXPLOITABLE", "ranking": [9, 22], "explanation": "The target tried to execute a malformed or privileged instruction. This may indicate that the control flow is tainted.", "short_desc": "BadInstruction", "desc": "Bad instruction"}], ["exploitable/tests/bin/testBlockMoveAv.test", {"category": "PROBABLY_EXPLOITABLE", "ranking": [14, 22], "explanation": "The target crashed during a block move, which may indicate that the attacker can control a buffer overflow.", "short_desc": "BlockMoveAv", "desc": "Access violation during block move"}], ["exploitable/tests/bin/testSegFaultOnPc.test", {"category": "EXPLOITABLE", "ranking": [3, 22], "explanation": "The target tried to access data at an address that matches the program counter. This is likely due to the execution of a branch instruction (ex: 'call') with a bad argument, but it could also be due to execution continuing past the end of a memory region or another cause. Regardless this likely indicates that the program counter contents are tainted and can be controlled by an attacker.", "short_desc": "SegFaultOnPc", "desc": "Segmentation fault on program counter"}], ["exploitable/tests/bin/testStackBufferOverflow.test", {"category": "EXPLOITABLE", "ranking": [6, 22], "explanation": "The target stopped while handling a signal that was generated by libc due to detection of a stack buffer overflow. Stack buffer overflows are generally considered exploitable.", "short_desc": "StackBufferOverflow", "desc": "Stack buffer overflow"}], ["exploitable/tests/bin/testAbortSignal.test", {"category": "UNKNOWN", "ranking": [20, 22], "explanation": "The target is stopped on a SIGABRT. SIGABRTs are often generated by libc and compiled check-code to indicate potentially exploitable conditions. Unfortunately this command does not yet further analyze these crashes.", "short_desc": "AbortSignal", "desc": "Abort signal"}], ["exploitable/tests/bin/testDestAv.test", {"category": "EXPLOITABLE", "ranking": [8, 22], "explanation": "The target crashed on an access violation at an address matching the destination operand of the instruction. This likely indicates a write access violation, which means the attacker may control the write address and/or value.", "short_desc": "DestAv", "desc": "Access violation on destination operand"}], ["exploitable/tests/bin/testUncategorizedSignal.test", {"category": "UNKNOWN", "ranking": [22, 22], "explanation": "The target is stopped on a signal. This may be an exploitable condition, but this command was unable to categorize it.", "short_desc": "UncategorizedSignal", "desc": "Uncategorized signal"}], ["exploitable/tests/bin/testHeapError.test", {"category": "UNKNOWN", "ranking": [20, 22], "explanation": "The target is stopped on a SIGABRT. SIGABRTs are often generated by libc and compiled check-code to indicate potentially exploitable conditions. Unfortunately this command does not yet further analyze these crashes.", "short_desc": "AbortSignal", "desc": "Abort signal"}], ["exploitable/tests/bin/testBranchAvNearNull.test", {"category": "PROBABLY_EXPLOITABLE", "ranking": [13, 22], "explanation": "The target crashed on a branch instruction, which may indicate that the control flow is tainted. However, there is a chance it could be a NULL dereference.", "short_desc": "BranchAvNearNull", "desc": "Access violation near NULL during branch instruction"}], ["exploitable/tests/bin/testFloatingPointException.test", {"category": "PROBABLY_NOT_EXPLOITABLE", "ranking": [17, 22], "explanation": "The target crashed on a floating point exception. This may indicate a division by zero or a number of other floating point errors. It is generally difficult to leverage these types of errors to gain control of the processor.", "short_desc": "FloatingPointException", "desc": "Floating point exception signal"}], ["exploitable/tests/bin/testPossibleStackCorruption.test", {"category": "EXPLOITABLE", "ranking": [7, 22], "explanation": "GDB generated an error while unwinding the stack and/or the stack contained return addresses that were not mapped in the inferior's process address space and/or the stack pointer is pointing to a location outside the default stack region. These conditions likely indicate stack corruption, which is generally considered exploitable.", "short_desc": "PossibleStackCorruption", "desc": "Possible stack corruption"}], ["exploitable/tests/bin/testBranchAv.test", {"category": "EXPLOITABLE", "ranking": [4, 22], "explanation": "The target crashed on a branch instruction, which may indicate that the control flow is tainted.", "short_desc": "BranchAv", "desc": "Access violation during branch instruction"}], ["exploitable/tests/bin/testStackCodeExecution.test", {"category": "EXPLOITABLE", "ranking": [5, 22], "explanation": "The target stopped on an error while executing code within the process's stack region.", "short_desc": "StackCodeExection", "desc": "Executing from stack"}], ["exploitable/tests/bin/testSegFaultOnPcNearNull.test", {"category": "PROBABLY_EXPLOITABLE", "ranking": [12, 22], "explanation": "The target tried to access data at an address that matches the program counter. This may indicate that the program counter contents are tainted, however, it may also indicate a simple NULL deference.", "short_desc": "SegFaultOnPcNearNull", "desc": "Segmentation fault on program counter near NULL"}]]