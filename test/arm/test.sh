#!/bin/bash
#
# TODO: describe this file.
#
# jmfoote@loyola.edu

echo "It's go time!" # &> log-setup.txt # use this redirection for cloudinit

# install keys for accessing private git repo (included this while it is fresh so I don't forget how to do it)
#sudo echo "priv deploy key here" > ~/.ssh/id_rsa
#sudo chmod 600 ~/.ssh/id_rsa # &>> log-setup.txt
#sudo echo "pub deploy key here" > ~/.ssh/id_rsa.pub
#sudo chmod 644 ~/.ssh/id_rsa.pub # &>> log-setup.txt
#sudo echo "pub key for control box here" >> ~/.ssh/authorized_keys
#sudo chmod 600 ~/.ssh/authorized_keys # &>> log-setup.txt
#sudo echo "known host for git server here if cloning over ssh" # &>> ~/.ssh/known_hosts
#sudo chmod 644 ~/known_hosts
#sudo chown admin ~/.ssh/*

# get project code (travis-ci does this automagically)
#git clone https://github.com/jfoote/exploitable -b integration

# install dependencies 
# TODO: uncomment these
#sudo apt-get update
#sudo apt-get install gdb gcc python --yes # &>> log-setup.txt # essentials for x86
#sudo apt-get install git vim psmisc --yes # &>> log-setup.txt # dev tools
#sudo apt-get install qemu python-pip --yes # &>> log-setup.txt # arm testing 
#sudo apt-get install execstack --yes # &>> log-setup.txt # x86 testing 
#sudo pip install boto # &>> log-setup.txt

# note: for cloudinit, change user commands to this form: su <username> -c "command"

# get arm cross-compile toolchain. the toolchain is stored in a private S3 
# bucket; we use travis-ci encryption to protect the keys to the bucket
# ref: http://about.travis-ci.org/docs/user/encryption-keys/
python -c 'import boto, os; boto.connect_s3(os.environ["AWS_ACCESS_KEY_ID"], os.environ["AWS_SECRET_ACCESS_KEY"]).get_bucket("exploitable").get_key("arm-toolchain-slim.tar.bz2").get_contents_to_filename("arm-toolchain.tar.bz2")'
tar -xjf arm-toolchain.tar.bz2 # dir is ~/arm-2013.11

# build ARM test cases
pushd ~/exploitable/exploitable/tests
make -f Makefile.arm
popd

# get ARM test VM (see http://wiki.qemu.org/Testing#QEMU_disk_images); 
wget http://wiki.qemu.org/download/arm-test-0.2.tar.gz # &>> log-setup.txt # arm disk image
tar -xzf arm-test-0.2.tar.gz # dir is arm-test

# get python-equipped, ARM-compatible GDB (see https://wiki.mozilla.org/Mobile/Fennec/Android/GDB)
wget http://people.mozilla.org/~nchen/jimdb/jimdb-arm-linux_x64.tar.bz2 
tar -xjf jimdb-arm-linux_x64.tar.bz2 # directory is jimdb-arm

# patch VM initrd to run GDB server on startup
mkdir ~/initrd 
pushd ~/initrd && gunzip -c ~/arm-test/arm_root.img | cpio -i -vd -H newc
cp ~/exploitable/exploitable/tests/bin/* ~/initrd/root/ # all test binaries
cp ~/arm-2013.11/bench/gdbserver ~/initrd/root # gdbserver 
chmod +x ~/initrd/root/*
echo "
cd /root
/root/gdbserver --multi 10.0.2.14:1234
" >> ~/initrd/etc/init.d/rcS
rm ~/arm-test/arm_root.img
find . | cpio -o -H newc | gzip -9 > ~/arm-test/arm_root.img
popd

# NOTE: another way to do the above is to 1) modify the initrd disk
# (arm_root.img) so that it copies and runs a remote script, 2) upload the 
# modified initrd and kernel to S3 (they are only 3.4MB together), and 3)
# download the modified version and run it directly here. The remote script
# can copy in the test binaries, run GDB server, etc. Here are some code 
# snippets that support doing things that way:
#echo "
#tftp -gr vm-init.sh 10.0.2.33
#chmod +x vm-init.sh
#./vm-init.sh
#" >> ~/initrd/etc/init.d/rcS
## setup VM shared directory
#mkdir ~/share
#cp ~/exploitable/exploitable/tests/bin/* ~/share
#cp ~/exploitable/test/arm/vm/vm-init.sh ~/share
#cp ~/arm-2013.11/bench/gdbserver ~/initrd/root # gdbserver 

# run tests in ARM emulator
#timeout -k 60 300 qemu-system-arm -kernel ~/arm-test/zImage.integrator -initrd ~/arm-test/arm_root.img -nographic -append "console=ttyAMA0" -net nic -net user,tftp=share,host=10.0.2.33 -redir tcp:1234::1234

# clean up 
##rm -rf ~/share
#rm -rf ~/initrd
#rm -rf jimdb-arm
#rm jimdb-arm-linux_x64.tar.bz2
#rm -rf arm-test 
#rm arm-test-0.2.tar.gz
#pushd ~/exploitable/exploitable/tests && make -f Makefile.arm clean && popd
#rm -rf arm-2013.11
#rm arm-toolchain.tar.bz2

echo "done" # &>> log-setup.txt

