#!/bin/bash
#
# TODO: describe this file.
# make script work from an arbitrary directory (rather than being hardcoded for ${HOME}
#
# jmfoote@loyola.edu

set -e # exit if any simple command returns non-zero
set -x # this script is not polished/user-friendly, so we debug by default

PROJECT_DIR=${TRAVIS_BUILD_DIR:-$(pwd)}
BUILD_DIR=$PROJECT_DIR/build

clone() {
    # get project code (travis-ci does this automagically)
    git clone https://github.com/jfoote/exploitable -b integration
}

get_deps() {

    # install dependencies 
    sudo apt-get update
    sudo apt-get install gdb gcc python --yes # essentials for x86
    sudo apt-get install execstack --yes # x86 testing 
}

build() {
    mkdir -p $BUILD_DIR

    # build test cases
    pushd ${PROJECT_DIR}/exploitable/tests
    make
    popd
}

run_test() {
    pushd ${PROJECT_DIR}
    python triage.py -vo ${BUILD_DIR}/result.json \$sub `find exploitable/tests/bin -type f` 
    popd
   
    # check results
    python -c "import json, sys; from triage import *; sys.exit(sorted(filter(lambda x: x[1], json.load(file('${BUILD_DIR}/result.json')))) != sorted(filter(lambda x: x[1], json.load(file('${PROJECT_DIR}/test/x86-expected.json')))))"
}

clean() {
    # clean up 
    rm -rf ${BUILD_DIR}
    pushd ${PROJECT_DIR}/exploitable/tests && make clean && popd
}

echo "starting"

# Run end-to-end test, or a a list of functions if the user has specified them
if [[ -z $1 ]] ; then
  get_deps
  build
  run_test
  clean
else
  for cmd in $@
  do
    $cmd
  done
fi

echo "done!"
exit 0
