#!/bin/bash
#
# TODO: describe this file.
# make script work from an arbitrary directory (rather than being hardcoded for ${HOME}
#
# jmfoote@loyola.edu

set -e # exit if any simple command returns non-zero
: ${TRAVIS_BUILD_DIR:?"Need to set TRAVIS_BUILD_DIR non-empty"}
PROJECT_DIR=$TRAVIS_BUILD_DIR
BUILD_DIR=$PROJECT_DIR/build

clone() {
    # get project code (travis-ci does this automagically)
    git clone https://github.com/jfoote/exploitable -b integration
}

get_deps() {

    # install dependencies 
    sudo apt-get update
    sudo apt-get install gdb gcc python --yes # essentials for x86
    sudo apt-get install git vim psmisc --yes # dev tools
    sudo apt-get install execstack --yes # x86 testing 
}

build() {
    mkdir -p $BUILD_DIR

    # build test cases
    pushd ${PROJECT_DIR}/exploitable/tests
    make
    popd
}

run_test() {
    failed=1
    pushd ${PROJECT_DIR}
    python triage.py -v \$sub `find exploitable/tests/bin -type f` > ${BUILD_DIR}/triage.txt
    popd
   
    # check results
    expected='EXPLOITABLE: SegFaultOnPc
exploitable/tests/bin/testReturnAv.test (PossibleStackCorruption) (AccessViolation)
exploitable/tests/bin/testSegFaultOnPc.test (AccessViolation)

EXPLOITABLE: BranchAv
exploitable/tests/bin/testBranchAv.test (DestAv) (AccessViolation)

EXPLOITABLE: StackCodeExection
exploitable/tests/bin/testStackCodeExecution.test (BadInstruction)

EXPLOITABLE: StackBufferOverflow
exploitable/tests/bin/testStackBufferOverflow.test (PossibleStackCorruption) (AccessViolation)

EXPLOITABLE: PossibleStackCorruption
exploitable/tests/bin/testPossibleStackCorruption.test (DestAv) (AccessViolation)

EXPLOITABLE: DestAv
exploitable/tests/bin/testDestAv.test (AccessViolation)

EXPLOITABLE: BadInstruction
exploitable/tests/bin/testBadInstruction.test

PROBABLY_EXPLOITABLE: SegFaultOnPcNearNull
exploitable/tests/bin/testSegFaultOnPcNearNull.test (AccessViolation)

PROBABLY_EXPLOITABLE: BranchAvNearNull
exploitable/tests/bin/testBranchAvNearNull.test (DestAvNearNull) (AccessViolation)

PROBABLY_EXPLOITABLE: BlockMoveAv
exploitable/tests/bin/testBlockMoveAv.test (DestAvNearNull) (AccessViolation)

PROBABLY_EXPLOITABLE: DestAvNearNull
exploitable/tests/bin/testDestAvNearNull.test (AccessViolation)

PROBABLY_NOT_EXPLOITABLE: SourceAvNearNull
exploitable/tests/bin/testSourceAvNearNull.test (AccessViolation)

PROBABLY_NOT_EXPLOITABLE: FloatingPointException
exploitable/tests/bin/testFloatingPointException.test

PROBABLY_NOT_EXPLOITABLE: BenignSignal
exploitable/tests/bin/testBenignSignal.test

UNKNOWN: SourceAv
exploitable/tests/bin/testSourceAv.test (AccessViolation)

UNKNOWN: AbortSignal
exploitable/tests/bin/testAbortSignal.test
exploitable/tests/bin/testHeapError.test

UNKNOWN: UncategorizedSignal
exploitable/tests/bin/testUncategorizedSignal.test
' 

    result=$(tail -n `echo "$expected" | wc -l` ${BUILD_DIR}/triage.txt)
    echo result:
    echo "$result"
    echo expected:
    echo "$expected"

    # eliminate newlines and whitespace differences
    expected=$(echo "$expected" | tr -d ' \n')
    result=$(echo "$result" | tr -d ' \n')
    if [[ "$result" == "$expected" ]]; then
      failed=0
    fi

}

clean() {
    # clean up 
    rm ${BUILD_DIR}/triage.txt
    pushd ${PROJECT_DIR}/exploitable/tests && make clean && popd
}

echo "starting"
failed=0

# Run end-to-end test, or a a list of functions if the user has specified them
if [[ -z $1 ]] ; then
  get_deps
  build
  run_test
  clean
else
  for cmd in $@
  do
    $cmd
  done
fi

if [[ 0 -eq $failed ]] ; then
  echo "success"
else
  echo "failed"
fi

exit $failed
